@page "/delete"
@inject NavigationManager NavigationManager
@inject SkinService SkinService
@using FinalFN.Services
@using FinalFN.Data

<h3>Delete Skin</h3>

<div>
    <label for="skinId">Enter Skin ID to Delete:</label>
    <input type="number" id="skinId" @bind="skinIdToDelete" />
    <button @onclick="DeleteSkin">Delete</button>
</div>

<div class="form-group">
    <label for="searchSkin">Search Skin:</label>
    <input type="text" id="searchSkin" class="form-control" @bind="searchTerm" />
    <button class="btn btn-primary" @onclick="SearchSkins">Search</button>
</div>

@if (deletedSkin != null)
{
    <div>
        <h4>Deleted Skin:</h4>
        <p>ID: @deletedSkin.Id</p>
        <p>Name: @deletedSkin.Name</p>
        <p>Description: @deletedSkin.Description</p>
        <p>Weapon: @deletedSkin.WeaponName</p>
        <p>Rarity: @deletedSkin.RarityName</p>
        <p>Picture URL: @deletedSkin.PictureUrl</p>
    </div>
}

    <div>
        <h4>Search Results:</h4>
        <ul>
            @foreach (var result in searchResults)
            {
                <li>
                    <p>ID: @result.Id</p>
                    <p>Name: @result.Name</p>
                    <p>Description: @result.Description</p>
                    <p><img src="@result.PictureUrl" alt="Skin Image" class="img-thumbnail" /></p>
                    
                    
                </li>
            }
        </ul>
    </div>




@code {
    private int skinIdToDelete;
    private Skin deletedSkin;

    private async Task DeleteSkin()
    {
        deletedSkin = await SkinService.DeleteSkin(skinIdToDelete);
    }

    private List<Skin> skins = new List<Skin>();
    private List<Skin> searchResults = new List<Skin>();
    private Skin selectedSkin;
    private string searchTerm;

    protected override async Task OnInitializedAsync()
    {
        skins = await SkinService.GetAllSkins();
    }

    // Search for skins based on the entered search term
    private void SearchSkins()
    {
        searchResults = string.IsNullOrEmpty(searchTerm)
            ? new List<Skin>()
            : skins.Where(s => s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    // Add the selected skin to user skins
    private async Task AddUserSkin(Skin skin)
    {
        // Call the service to add the selected skin to user skins
        await SkinService.AddUserSkin2(skin);

        // Navigate back to the user skins page
        NavigationManager.NavigateTo("/user-skins");
    }

    // Update the selected skin when the dropdown value changes
    private void UpdateSelectedSkin(ChangeEventArgs e)
    {
        var selectedId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedId))
        {
            var selectedIdInt = int.Parse(selectedId);
            selectedSkin = skins.FirstOrDefault(s => s.Id == selectedIdInt);
        }
        else
        {
            selectedSkin = null;
        }
    }

    // Add user skin using the original dropdown
    private async Task AddUserSkin2()
    {
        if (selectedSkin != null)
        {
            // Call the service to add the selected skin to user skins
            await SkinService.AddUserSkin2(selectedSkin);

            // Navigate back to the user skins page
            NavigationManager.NavigateTo("/user-skins");
        }
        else
        {
            // Handle the case where no skin is selected
            Console.WriteLine("Please select a skin.");
        }
    }
}
