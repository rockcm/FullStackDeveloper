@page "/skins"
@inject SkinService SkinService
@using FinalFN.Data
@using FinalFN.Services

<h3>Skins List</h3>
<br />

@if (skins == null)
{
    <p>Loading...</p>
}
else if (skins.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Weapon</th>
                <th>Rarity</th>
                <th>Picture</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var skin in skins)
            {
                <tr>
                    <td>@skin.Id</td>
                    <td>@skin.Name</td>
                    <td>@skin.Description</td>
                    <td>@skin.WeaponName</td>
                    <td>@skin.RarityName</td>
                    <td><img src="@skin.PictureUrl" alt="Skin Image" class="img-thumbnail" /></td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditSkin(skin)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteSkin(skin.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No skins available.</p>
}

@if (isEditModalOpen)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Skin</h5>
                    <button type="button" class="close" @onclick="CloseEditModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="updatedName">Name:</label>
                        <input id="updatedName" class="form-control" @bind="updatedSkin.Name" />
                    </div>
                    <div class="form-group">
                        <label for="updatedDescription">Description:</label>
                        <input id="updatedDescription" class="form-control" @bind="updatedSkin.Description" />
                    </div>
                    <div class="form-group">
                        <label for="updatedWeaponName">Weapon:</label>
                        <input id="updatedWeaponName" class="form-control" @bind="updatedSkin.WeaponName" />
                    </div>
                    <div class="form-group">
                        <label for="updatedRarityName">Rarity:</label>
                        <input id="updatedRarityName" class="form-control" @bind="updatedSkin.RarityName" />
                    </div>
                    <div class="form-group">
                        <label for="updatedPictureUrl">Picture URL:</label>
                        <input id="updatedPictureUrl" class="form-control" @bind="updatedSkin.PictureUrl" />
                    </div>
                    <button class="btn btn-primary" @onclick="UpdateSkin">Update</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Skin> skins;
    private SkinUpdate updatedSkin = new SkinUpdate(); // This will hold the edited values
    private bool isEditModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
     
        await LoadSkins();
    }

    private async Task LoadSkins()
    {
        skins = await SkinService.GetAllSkins();
        StateHasChanged();
    }

    private void EditSkin(Skin skin)
    {
        isEditModalOpen = true;
        updatedSkin = new SkinUpdate
            {
                Id = skin.Id,
                Name = skin.Name,
                Description = skin.Description,
                WeaponName = skin.WeaponName,
                RarityName = skin.RarityName,
                PictureUrl = skin.PictureUrl
            };
    }

    private async Task UpdateSkin()
    {
        var updatedSkinResult = await SkinService.UpdateSkin(updatedSkin.Id.Value, updatedSkin);

        if (updatedSkinResult != null)
        {
            isEditModalOpen = false;
            await LoadSkins();
        }
    }

    private async Task DeleteSkin(int skinId)
    {
        var deletedSkin = await SkinService.DeleteSkin(skinId);
        StateHasChanged();

        if (deletedSkin != null)
        {
            await LoadSkins();
        }
    }

    private async Task CloseEditModal()
    {
        isEditModalOpen = false;
        await LoadSkins();
    }


}
